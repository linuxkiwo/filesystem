var loadApp = (path, configPath) => {
	/*
	 * Esta libreria se encarga:
	 * -Cargar el fichero de cofiguración
	 * -Generar los string con todos los modulos
	 *  que se tienen que importar según los plugins que tenga el usuario o
	 *  según que se reciva por argumento al llamar al programa.
	 *
	 * -Cuando genere los script mueve todos los archivos a la carpeta de .buffer
	 *  para cuando se cierre la app borrarlos y nunca afectar a los archivos
	 *  orifinales
	*/
	this.path = path;
	this.homeDir ='';
	this.configPath = configPath;
	this.ready = [false, false];
	
	this.__loadCss = (css, where = 'css/') => {
		for (let s of css)
				this.css += `<link rel="stylesheet" href="${where}${s}">`;
	};
	this.__loadPlugins = (obj) => {
		for (let o of obj) {
			if(!o["load_default"]) continue;
			if (o["difference_between_front_and_back"]){
				let name = (o["difference_between_front_and_back"] === true) ? "{Render}" : "{ " + o["difference_between_front_and_back"][1] + "}";  
				this.js += `const ${name} = require('${o["name"]}');`;
			}
			else js += `const ${o["name"]} = require('${o["name"]}');`;
			if (o["style"])
				this.__loadCss(o["style"], "../node_modules/");				
		}	
	};
	this.__updateFiles = () => {
		let filesToReplace = ['index.html', 'js/main.js'];
		for (let f of filesToReplace)
			fs.readFile(`${this.path}/dist/${f}`, 'utf-8', (err, data) => {
				let change = data.match(/[#][{](\w*)[}]/)[0],
					par = change.replace('#{', '').replace('}', '');
				data = data.replace()
				data = data.replace(change, this[par]);
				fs.wrtite(`${this.path}/.buffer/${f}`, data, (err) => {
					if (err) return console.log(err);
				})
			});
	};

	this.__copyInBuffer = ((src, dst) => {
		fs.readdir(src, (err, files) => {
			for (let i = 0; i<dir.length; i++){
				if (fs.lstatSync(src + dir[i]).isFile())
					fs.createReadStream(src + dir[i]).pipe(fs.createWriteStream(dst +"/"+ dir[i]));
				else if (fs.lstatSync(src + dir[i]).isDirectory())
					fs.mkdir(dst +"/"+dir[i], '0777', (e)=>{
						if (e) return console.log(e);
							this.copyInBuffer((src + dir[i] + '/'), dst +"/"+ dir[i]);
					});
			}
			this.ready[0] = true;
			if (this.ready[0] && this.ready[1]){
				this.__updateFiles();
				this.ready[0] = false;
			}
		});
	})();
	this.__secuence = (()=>{
		//creamos una copa de dist en .buffer
		
		//leemos el fichero de configuración
		fs.readFile(this.configPath, 'utf-8', (err, data)=>{
			if (err) return console.log(err);
			let filesToReplace = ['index.html', 'js/main.js'],
				scope = {}
			scope.css = ''; scope.js = '';
			config = JSON.parse(data);
			//Primero cargamos el nombre del usuario
			this.homeDir=`/home/${config["name"]}/`;
			//Cargamos los css personales de haberlos
			if (config[ProgramName]["style"]) 
				this.__loadCss(config[ProgramName]["style"]);
			//Después se mira si tiene algún plugin y si lo tiene que cargar
			if (config[ProgramName]["pluggins"].length >1) this.__loadPlugins(config[ProgramName]["pluggins"]);
			this.ready[1] = true;
			//Si ya han terminado ambos metodos asyncronicos, se llama  this.update
			if (this.ready[0] && this.ready[1]){
				this.__updateFiles();
				this.ready[1] = false;
			}
		}
	})();
}